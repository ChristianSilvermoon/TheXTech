name: Continuous Integration

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: ${{ matrix.config.name }} | ${{ matrix.config.build_type }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Super Mario Bros. X - macOS",
            os: macos-latest,
            extra_options: "-DTHEXTECH_PRELOAD_ENVIRONMENT=\"`pwd`/assets/\" -DTHEXTECH_CUSTOM_ICON_PATH=\"`pwd`/assets/graphics/ui/icon/smbx.icns\" -DTHEXTECH_ICON_NAME=smbx.icns -DTHEXTECH_BUNDLE_NAME=\"Super Mario Bros. X\" -DTHEXTECH_EXECUTABLE_NAME=\"thextech\"",
            deps_cmdline: "brew install ninja wget p7zip",
            build_type: "MinSizeRel",
            assets_url: "https://wohlsoft.ru/TheXTech/_downloads/thextech-smbx13-assets-full.7z",
            package_filename: "thextech-super-mario-bros-x.dmg"
          }
        - {
            name: "Super Mario Bros. X - Ubuntu 16.04",
            os: ubuntu-16.04,
            extra_options: "-DUSE_STATIC_LIBC=ON -DUSE_SYSTEM_LIBS=OFF -DUSE_SYSTEM_SDL2=OFF -DUSE_SHARED_FREEIMAGE=OFF",
            deps_cmdline: "sudo apt update && sudo apt install cmake ninja-build",
            build_type: "MinSizeRel",
            assets_url: "https://wohlsoft.ru/TheXTech/_downloads/thextech-smbx13-assets-full.7z",
            subdir_name: "thextech-super-mario-bros-x",
            package_filename: "thextech-super-mario-bros-x.tar.gz"
          }

    steps:
    - uses: actions/checkout@v1

    - name: Install Dependencies
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.deps_cmdline }}" ]]; then
          eval ${{ matrix.config.deps_cmdline }}
        fi
        # Pull submodules
        git submodule init
        git submodule update

    - name: Download assets
      shell: bash
      run: |
        wget "${{ matrix.config.assets_url }}" -O assets.7z
        mkdir -p assets
        cd assets
        7z x ../assets.7z
        cd ..
        rm assets.7z

    - name: Configure
      shell: bash
      run: |
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} ${{ matrix.config.extra_options }} .

    - name: Build
      shell: bash
      run: |
        export MAKEFLAGS=--keep-going
        cmake --build build --config ${{ matrix.config.build_type }} --parallel 3

    - name: Create Package
      if: runner.os == 'macOS'  # Remove to make packages of all targets
      shell: bash
      run: |
        cd build
        mkdir package
        if [[ "${{ runner.os }}" == 'Windows' ]]; then
          echo "WIP"
        elif [[ "${{ runner.os }}" == 'macOS' ]]; then
          cpack ..
          mv *.dmg package/${{ matrix.config.package_filename }}
        elif [[ "${{ runner.os }}" == 'Linux' ]]; then
          mkdir "package/${{ matrix.config.subdir_name }}"
          cp output/bin/thextech "package/${{ matrix.config.subdir_name }}/thextech"
          cp -r assets/* "package/${{ matrix.config.subdir_name }}/"
          tar -cvzf -C package "${{ matrix.config.package_filename }}" "${{ matrix.config.subdir_name }}"
        fi
        cd ..

    - name: Upload Package
      if: runner.os == 'macOS'  # Remove to store packages of all targets
      uses: actions/upload-artifact@v2
      with:
        path: build/package/${{ matrix.config.package_filename }}
        name: ${{ matrix.config.name }} ${{ matrix.config.build_type }}

    - name: List Build Directory
      if: always()
      shell: bash
      run: |
        git status
        ls -lR build
