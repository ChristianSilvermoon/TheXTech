name: Continuous Integration

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: ${{ matrix.config.name }} | ${{ matrix.config.build_type }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Super Mario Bros. X - macOS",
            os: macos-latest,
            extra_options: "-DTHEXTECH_PRELOAD_ENVIRONMENT=\"`pwd`/assets/\" -DTHEXTECH_CUSTOM_ICON_PATH=\"`pwd`/assets/graphics/ui/icon/smbx.icns\" -DTHEXTECH_ICON_NAME=smbx.icns -DTHEXTECH_BUNDLE_NAME=\"Super Mario Bros. X\" -DTHEXTECH_EXECUTABLE_NAME=\"thextech\"",
            deps_cmdline: "brew install ninja wget p7zip lftp",
            build_type: "MinSizeRel",
            assets_url: "https://wohlsoft.ru/TheXTech/_downloads/thextech-smbx13-assets-full.7z",
            package_filename: "thextech-super-mario-bros-x-intel-dev.dmg",
            upload_directory: "www/macosx/"
          }
        - {
            name: "Windows - 64-bit",
            os: windows-latest,
            extra_options: "-DCMAKE_PREFIX_PATH=C:/WohlMinGWw64/mingw64 -DCMAKE_C_COMPILER=C:/WohlMinGWw64/mingw64/bin/gcc.exe -DCMAKE_CXX_COMPILER=C:/WohlMinGWw64/mingw64/bin/g++.exe",
#             deps_cmdline: "wget https://wohlsoft.ru/docs/Software/lftp-4.4.15.win64-openssl-1.0.1g.7z -O lftp.7z && 7z x lftp.7z -oC:/lftp",
            build_type: "MinSizeRel",
            assets_url: "https://wohlsoft.ru/TheXTech/_downloads/thextech-smbx13-assets-full.7z",
            subdir_name: "thextech-super-mario-bros-x",
            extra_path: "C:/WohlMinGWw64/mingw64/bin",
            package_filename: "thextech-super-mario-bros-x-win64-dev.7z",
            upload_directory: "www/win32/",
            mingw_download: "https://wohlsoft.ru/docs/Software/MinGW/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z", mingw_install_dir: "C:/WohlMinGWw64/",
            ninja_download: "https://wohlsoft.ru/docs/Software/Ninja-Build/ninja-win.zip", ninja_install_dir: "C:/WohlMinGWw64/mingw64/bin"
          }
        - {
            name: "Super Mario Bros. X - Ubuntu 16.04",
            os: ubuntu-16.04,
            extra_options: "-DUSE_STATIC_LIBC=ON -DUSE_SYSTEM_LIBS=OFF -DUSE_SYSTEM_SDL2=OFF -DUSE_SHARED_FREEIMAGE=OFF -DPGE_SHARED_SDLMIXER=OFF",
            deps_cmdline: "sudo apt-get update -qq && sudo apt-get install -qq cmake ninja-build cmake ninja-build lftp \"^libxcb.*\" libx11-dev libx11-xcb-dev libgtk-3-dev libgegl-dev libxcursor-dev libxrender-dev libxrandr-dev libxext-dev libxi-dev libxss-dev libxt-dev libxv-dev libxxf86vm-dev libxinerama-dev libxkbcommon-dev libfontconfig1-dev libasound2-dev libpulse-dev libdbus-1-dev udev mtdev-tools webp libudev-dev libglm-dev libwayland-dev libegl1-mesa-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libgles2-mesa libgles2-mesa-dev libmirclient-dev libproxy-dev",
            build_type: "MinSizeRel",
            assets_url: "https://wohlsoft.ru/TheXTech/_downloads/thextech-smbx13-assets-full.7z",
            subdir_name: "thextech-super-mario-bros-x",
            package_filename: "thextech-super-mario-bros-x-ubuntu-16-04-amd64-dev.tar.gz",
            upload_directory: "www/ubuntu-16-04/"
          }
        - {
            name: "Super Mario Bros. X - Ubuntu 18.04",
            os: ubuntu-18.04,
            extra_options: "-DUSE_STATIC_LIBC=ON -DUSE_SYSTEM_LIBS=OFF -DUSE_SYSTEM_SDL2=OFF -DUSE_SHARED_FREEIMAGE=OFF -DPGE_SHARED_SDLMIXER=OFF",
            deps_cmdline: "sudo apt-get update -qq && sudo apt-get install -qq cmake ninja-build cmake ninja-build lftp \"^libxcb.*\" libx11-dev libx11-xcb-dev libgtk-3-dev libgegl-dev libxcursor-dev libxrender-dev libxrandr-dev libxext-dev libxi-dev libxss-dev libxt-dev libxv-dev libxxf86vm-dev libxinerama-dev libxkbcommon-dev libfontconfig1-dev libasound2-dev libpulse-dev libdbus-1-dev udev mtdev-tools webp libudev-dev libglm-dev libwayland-dev libegl1-mesa-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libgles2-mesa libgles2-mesa-dev libmirclient-dev libproxy-dev",
            build_type: "MinSizeRel",
            assets_url: "https://wohlsoft.ru/TheXTech/_downloads/thextech-smbx13-assets-full.7z",
            subdir_name: "thextech-super-mario-bros-x",
            package_filename: "thextech-super-mario-bros-x-ubuntu-18-04-amd64-dev.tar.gz",
            upload_directory: "www/ubuntu-18-04/"
          }
        - {
            name: "Super Mario Bros. X - Ubuntu 20.04",
            os: ubuntu-20.04,
            extra_options: "-DUSE_STATIC_LIBC=ON -DUSE_SYSTEM_LIBS=OFF -DUSE_SYSTEM_SDL2=OFF -DUSE_SHARED_FREEIMAGE=OFF -DPGE_SHARED_SDLMIXER=OFF",
            deps_cmdline: "sudo apt-get update -qq && sudo apt-get install -qq cmake ninja-build cmake ninja-build lftp \"^libxcb.*\" libx11-dev libx11-xcb-dev libgtk-3-dev libgegl-dev libxcursor-dev libxrender-dev libxrandr-dev libxext-dev libxi-dev libxss-dev libxt-dev libxv-dev libxxf86vm-dev libxinerama-dev libxkbcommon-dev libfontconfig1-dev libasound2-dev libpulse-dev libdbus-1-dev udev mtdev-tools webp libudev-dev libglm-dev libwayland-dev libegl1-mesa-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libgles2-mesa libgles2-mesa-dev libmirclient-dev libproxy-dev",
            build_type: "MinSizeRel",
            assets_url: "https://wohlsoft.ru/TheXTech/_downloads/thextech-smbx13-assets-full.7z",
            subdir_name: "thextech-super-mario-bros-x",
            package_filename: "thextech-super-mario-bros-x-ubuntu-20-04-amd64-dev.tar.gz",
            upload_directory: "www/ubuntu-20-04/"
          }

    steps:
    - uses: actions/checkout@v1

    - name: Install Dependencies
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.deps_cmdline }}" ]]; then
          eval ${{ matrix.config.deps_cmdline }}
        fi
        # Pull submodules
        git submodule init
        git submodule update
    
    - name: Download MinGW
      if: matrix.config.mingw_download
      uses: carlosperate/download-file-action@v1.0.3
      with:
        file-url: "${{ matrix.config.mingw_download }}"
        file-name: mingw.7z

    - name: Extract MinGW
      if: matrix.config.mingw_install_dir
      shell: bash
      run: |
        7z x mingw.7z -o"${{ matrix.config.mingw_install_dir }}"

    - name: Download Ninja
      if: matrix.config.ninja_download
      uses: carlosperate/download-file-action@v1.0.3
      with:
        file-url: "${{ matrix.config.ninja_download }}"
        file-name: ninja.zip
        
    - name: Extract Ninja
      if: matrix.config.ninja_install_dir
      shell: bash
      run: |
        7z x ninja.zip -o"${{ matrix.config.ninja_install_dir }}"

    - name: Download assets
      uses: carlosperate/download-file-action@v1.0.3
      with:
        file-url: "${{ matrix.config.assets_url }}"
        file-name: assets.7z
    
    - name: Unpack assets
      shell: bash
      run: |
        mkdir -p assets
        cd assets
        7z x ../assets.7z
        cd ..
        rm assets.7z

    - name: Configure
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.extra_path }}" ]]; then
          export PATH=${{ matrix.config.extra_path }}:${PATH}
        fi
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} ${{ matrix.config.extra_options }} .

    - name: Build
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.extra_path }}" ]]; then
          export PATH=${{ matrix.config.extra_path }}:${PATH}
        fi
        export MAKEFLAGS=--keep-going
        cmake --build build --config ${{ matrix.config.build_type }} --parallel 3

    - name: List dependent libraries
      if: runner.os == 'Linux'
      shell: bash
      run: |
        file build/output/bin/thextech
        ldd build/output/bin/thextech

    - name: Create Package
      if: always()
      shell: bash
      run: |
        cd build
        mkdir package
        if [[ "${{ runner.os }}" == 'Windows' ]]; then
          mkdir "package/${{ matrix.config.subdir_name }}"
          cp output/bin/thextech.exe "package/${{ matrix.config.subdir_name }}/
          cp output/bin/*.dll "package/${{ matrix.config.subdir_name }}/
          cp -r ../assets/* "package/${{ matrix.config.subdir_name }}/"
          cd package
          7z a "${{ matrix.config.package_filename }}" "${{ matrix.config.subdir_name }}"
          rm -Rf "${{ matrix.config.subdir_name }}"
          cd ..
        elif [[ "${{ runner.os }}" == 'macOS' ]]; then
          cpack
          mv *.dmg package/${{ matrix.config.package_filename }}
        elif [[ "${{ runner.os }}" == 'Linux' ]]; then
          mkdir "package/${{ matrix.config.subdir_name }}"
          cp output/bin/thextech "package/${{ matrix.config.subdir_name }}/thextech"
          cp -r ../assets/* "package/${{ matrix.config.subdir_name }}/"
          cd package
          tar -cvzf "${{ matrix.config.package_filename }}" "${{ matrix.config.subdir_name }}"
          rm -Rf "${{ matrix.config.subdir_name }}"
          cd ..
        fi
        cd ..

    - name: Upload artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        path: build/package/${{ matrix.config.package_filename }}
        name: ${{ matrix.config.name }} ${{ matrix.config.build_type }}

    - name: Deploy to builds.wohlsoft.ru
      if: runner.os == 'macOS' || runner.os == 'Linux'
      shell: bash
      run: |
        UPLOAD_LIST="set ssl:verify-certificate no;"
        UPLOAD_LIST="${UPLOAD_LIST} put -O ${{ matrix.config.upload_directory }} ./build/package/${{ matrix.config.package_filename }};"
        lftp -e "${UPLOAD_LIST} exit" -u ${{ secrets.builds_login }},${{ secrets.builds_password }} ${{ secrets.builds_host }}

    - name: List Build Directory
      if: always()
      shell: bash
      run: |
        git status
        ls -lR build
